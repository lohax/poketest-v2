[{"D:\\projets\\react\\poketest-lunajets\\src\\index.js":"1","D:\\projets\\react\\poketest-lunajets\\src\\App.js":"2","D:\\projets\\react\\poketest-lunajets\\src\\reportWebVitals.js":"3","D:\\projets\\react\\poketest-lunajets\\src\\components\\Header.js":"4","D:\\projets\\react\\poketest-lunajets\\src\\components\\Pane.js":"5","D:\\projets\\react\\poketest-lunajets\\src\\graphql\\getPokemons.js":"6","D:\\projets\\react\\poketest-lunajets\\src\\components\\Browse.js":"7","D:\\projets\\react\\poketest-lunajets\\src\\components\\Search.js":"8","D:\\projets\\react\\poketest-lunajets\\src\\components\\Battle.js":"9","D:\\projets\\react\\poketest-lunajets\\src\\context\\context.js":"10","D:\\projets\\react\\poketest-lunajets\\src\\hooks\\usePokemons.js":"11","D:\\projets\\react\\poketest-lunajets\\src\\context\\index.js":"12","D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerAttacks.js":"13","D:\\projets\\react\\poketest-lunajets\\src\\components\\ComputerBox.js":"14","D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerBox.js":"15","D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerStandByPoke.js":"16","D:\\projets\\react\\poketest-lunajets\\src\\components\\ComputerStandByPoke.js":"17","D:\\projets\\react\\poketest-lunajets\\src\\components\\ReStart.js":"18","D:\\projets\\react\\poketest-lunajets\\src\\components\\MsgGame.js":"19","D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerImgPoke.js":"20","D:\\projets\\react\\poketest-lunajets\\src\\components\\ComputerImgPoke.js":"21"},{"size":697,"mtime":1609616141121,"results":"22","hashOfConfig":"23"},{"size":1869,"mtime":1610533623884,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":2449,"mtime":1610531837871,"results":"26","hashOfConfig":"23"},{"size":4163,"mtime":1610612140560,"results":"27","hashOfConfig":"23"},{"size":1994,"mtime":1610546961451,"results":"28","hashOfConfig":"23"},{"size":3410,"mtime":1610556626324,"results":"29","hashOfConfig":"23"},{"size":2500,"mtime":1610614528892,"results":"30","hashOfConfig":"23"},{"size":12115,"mtime":1610531900818,"results":"31","hashOfConfig":"23"},{"size":118,"mtime":1609421027734,"results":"32","hashOfConfig":"23"},{"size":5182,"mtime":1610640557852,"results":"33","hashOfConfig":"23"},{"size":69,"mtime":1609423270444,"results":"34","hashOfConfig":"23"},{"size":332,"mtime":1609660434446,"results":"35","hashOfConfig":"23"},{"size":1903,"mtime":1609668730514,"results":"36","hashOfConfig":"23"},{"size":1916,"mtime":1610531922348,"results":"37","hashOfConfig":"23"},{"size":3127,"mtime":1609707253572,"results":"38","hashOfConfig":"23"},{"size":3147,"mtime":1609707255414,"results":"39","hashOfConfig":"23"},{"size":238,"mtime":1609600730178,"results":"40","hashOfConfig":"23"},{"size":310,"mtime":1609660385074,"results":"41","hashOfConfig":"23"},{"size":875,"mtime":1609669251412,"results":"42","hashOfConfig":"23"},{"size":883,"mtime":1609669253087,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"f28sij",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\projets\\react\\poketest-lunajets\\src\\index.js",[],["89","90"],"D:\\projets\\react\\poketest-lunajets\\src\\App.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\reportWebVitals.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\Header.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\Pane.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\graphql\\getPokemons.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\Browse.js",["91","92"],"import React, { useContext } from 'react'\r\n\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport SlidingPane from 'react-sliding-pane'\r\nimport 'react-sliding-pane/dist/react-sliding-pane.css'\r\n\r\nimport { ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nimport Pane from './Pane'\r\nimport Search from './Search'\r\n// import Test from './Test'\r\n// import Browse from './Browse'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../sass/App.scss'\r\nimport '../sass/loader.scss'\r\nimport '../sass/Search.scss'\r\n\r\nimport { PokemonContext } from '../context/'\r\n\r\nfunction Browse () {\r\n  const {\r\n    data,\r\n    loading,\r\n    error,\r\n    allPokeFound,\r\n    state,\r\n    setState,\r\n    selectedPoke,\r\n    setSelectedPoke,\r\n    multiSelectedPoke,\r\n    setMultiSelectedPoke,\r\n    handleClick,\r\n    handleDblClick,\r\n    handleSearch\r\n  } = useContext(PokemonContext)\r\n\r\n  if (loading) return <div className='preloader'><div className='pokeball-spinner' /> </div>\r\n  if (error) return `Error! ${error.message}`\r\n\r\n  return (\r\n    <div className='App'>\r\n      <ToastContainer />\r\n\r\n      {/* Searching area */}\r\n      <Search\r\n        data={data || ''}\r\n        allPokeFound={allPokeFound || ''}\r\n        handleSearch={handleSearch || ''}\r\n      />\r\n\r\n      {/* Pokemons list */}\r\n\r\n      <div id='lstpokeContainer' className='container lstpoke mt-2'>\r\n        {data &&\r\n          data.pokemons &&\r\n          data.pokemons\r\n            .map((pokemon, index) => (\r\n\r\n              <div id={pokemon.name} key={pokemon.id}>\r\n                <div\r\n                  id={pokemon.name}\r\n                  className={`card poke-card ${multiSelectedPoke.includes(pokemon) ? 'pokeactive' : ''}`}\r\n                  role='button'\r\n                  onDoubleClick={() => handleDblClick(pokemon)}\r\n                  onClick={() => handleClick(pokemon, this)}\r\n                >\r\n                  <Image\r\n                    className='poke-item align-middle '\r\n                    src={pokemon.image}\r\n                    alt={pokemon.name}\r\n                    fluid\r\n                  />\r\n                </div>\r\n                <div className='card-body poke-name'>\r\n                  <span>{pokemon.name}</span>\r\n                </div>\r\n              </div>\r\n\r\n            ))}\r\n\r\n        {/* Pokemons panel details */}\r\n        {selectedPoke.length !== 0\r\n          ? <SlidingPane\r\n              closeIcon={<FontAwesomeIcon icon={faWindowClose} size='2x' className='closeico' />}\r\n              isOpen={state.isPaneOpen}\r\n              title={selectedPoke.name}\r\n              subtitle={selectedPoke.types.map((type, index) => (\r\n                <h6 className='d-inline' key={type} role='button'>\r\n                  <span class={`badge badge-light type-${type}`}>{type}</span>\r\n                </h6>\r\n              )).reduce((prev, curr) => [prev, ' - ', curr])}\r\n              onRequestClose={() => {\r\n                setState({ isPaneOpen: false })\r\n              }}\r\n            >\r\n\r\n            {/* Pokemons details */}\r\n            <Pane\r\n              pokemon={selectedPoke}\r\n              handleDblClick={handleDblClick}\r\n            />\r\n\r\n          </SlidingPane>\r\n\r\n          : ''}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Browse\r\n","D:\\projets\\react\\poketest-lunajets\\src\\components\\Search.js",["93"],"D:\\projets\\react\\poketest-lunajets\\src\\components\\Battle.js",["94","95","96"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport '../sass/Battle.scss'\r\nimport { PokemonContext } from '../context/'\r\n\r\nimport ComputerBox from './ComputerBox'\r\nimport PlayerBox from './PlayerBox'\r\nimport PlayerAttacks from './PlayerAttacks'\r\nimport ReStart from './ReStart'\r\nimport MsgGame from './MsgGame'\r\n\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\nconst Battle = () => {\r\n  const {\r\n    multiSelectedPoke,\r\n    computerSelectedPoke,\r\n    setMultiSelectedPoke,\r\n    setComputerSelectedPoke\r\n  } = useContext(PokemonContext)\r\n\r\n  const [pokePlayer, setPokePlayer] = useState([])\r\n  const [pokeComputer, setPokeComputer] = useState([])\r\n\r\n  const [pokePlayerHpNow, setPokePlayerHpNow] = useState('')\r\n  const [pokeComputerHpNow, setPokeComputerHpNow] = useState('')\r\n\r\n  const [computerAttack, setComputerAttack] = useState('')\r\n\r\n  const [msgGame, setMsgGame] = useState('')\r\n\r\n  const [computerState, setComputerState] = useState('start')\r\n  const [playerState, setPlayerState] = useState('start')\r\n\r\n  const [gameOver, setGameOver] = useState(false)\r\n\r\n  const [isStart, setIsStart] = useState(true)\r\n\r\n  const [prevPlayerTeam, setPrevPlayerTeam] = useState([])\r\n  const [prevComputerTeam, setPrevComputerTeam] = useState([])\r\n\r\n  let nowHpPlayer = ''\r\n  let nowHpComputer = ''\r\n\r\n  // Set Pokemon for player\r\n  useEffect(() => {\r\n    const pickPokePlayer = multiSelectedPoke.shift()\r\n    // setPrevPlayerTeam([...prevPlayerTeam, pickPokePlayer])\r\n    setPokePlayer(...pokePlayer, pickPokePlayer)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setPokePlayerHpNow(pokePlayerHpNow => pokePlayer.maxHP)\r\n  }, [pokePlayer.maxHP])\r\n\r\n  // Set Pokemon for computer\r\n  useEffect(() => {\r\n    const pickPokeComputer = computerSelectedPoke.shift()\r\n    // setPrevComputerTeam([...prevComputerTeam, pickPokeComputer])\r\n    setPokeComputer(pokeComputer => pickPokeComputer)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setPokeComputerHpNow(pokeComputerHpNow => pokeComputer.maxHP)\r\n  }, [pokeComputer.maxHP])\r\n\r\n  useEffect(() => {\r\n    // console.log('useEffect', pokeComputerHpNow)\r\n  }, [pokeComputerHpNow])\r\n\r\n  useEffect(() => {\r\n    // console.log('useEffect', pokeComputerHpNow)\r\n  }, [pokePlayerHpNow])\r\n\r\n  // useEffect(() => {\r\n  // }, [pokeComputer])\r\n\r\n  // Start management\r\n  useEffect(() => {\r\n    if (typeof pokeComputer.name !== 'undefined') {\r\n      pickComputerAttack()\r\n    }\r\n\r\n    // ready for battle\r\n    if (isStart && typeof pokeComputer.name !== 'undefined') {\r\n      // console.info(prevPlayerTeam)\r\n      // console.info(prevComputerTeam)\r\n      start()\r\n    }\r\n  }, [pokeComputer])\r\n\r\n  useEffect(() => {\r\n    // setShowFading(showFading => false)\r\n  }, [setMsgGame])\r\n\r\n  // useEffect(() => {\r\n  //   setPrevPlayerTeam(multiSelectedPoke)\r\n  // }, [])\r\n  // useEffect(() => {\r\n  //   setPrevComputerTeam(computerSelectedPoke)\r\n  // }, [])\r\n\r\n  const start = () => {\r\n    setIsStart(false)\r\n    setTimeout(() => {\r\n      setMsgGame(msgGame => `Computer defy you with ${pokeComputer.name} !`)\r\n      setTimeout(() => {\r\n        setMsgGame(msgGame => `Go ${pokePlayer.name}!`)\r\n        setTimeout(() => {\r\n          setMsgGame(msgGame => '')\r\n        }, 2000)\r\n      }, 3000)\r\n    }, 1)\r\n  }\r\n\r\n  const handlePlayerAttack = (name, damage) => {\r\n    const pokeDefWeakness = pokePlayer.weaknesses\r\n    const pokeDefResistant = pokePlayer.resistant\r\n    const pokeAttTypes = pokeComputer.types\r\n\r\n    // HANDLE ANIMATE\r\n    setPlayerState(playerState => 'attack')\r\n    setTimeout(() => {\r\n      setComputerState(setComputerState => 'damage')\r\n    }, 500)\r\n    // END ANIMATE\r\n\r\n    // TODO Random esquive 1/5\r\n    // TODO Extract damage calcul\r\n\r\n    // set initial damage\r\n    damage = (damage * 2) + Math.floor(Math.random() * 50)\r\n    // search for weakness\r\n    if (pokeDefWeakness.some(Weakness => pokeAttTypes.includes(Weakness))) { damage *= 2 }\r\n    // search for resistance\r\n    if (pokeDefResistant.some(Resistant => pokeAttTypes.includes(Resistant))) { damage /= 2 }\r\n    // set new damage\r\n    damage = Math.floor(damage)\r\n\r\n    nowHpComputer = ((pokeComputerHpNow - damage) < 0 ? 0 : (pokeComputerHpNow - damage))\r\n\r\n    // setPokeComputer(pokeComputer => {\r\n    //   return { ...pokeComputer, maxHP: nowHP }\r\n    // })\r\n    setPokeComputerHpNow(pokeComputerHpNow => nowHpComputer)\r\n\r\n    setMsgGame(msgGame => `${pokePlayer.name} used ${name} <br> and make ${damage} damage !`)\r\n    setTimeout(() => {\r\n      if (nowHpComputer === 0 && computerSelectedPoke.length === 0) {\r\n        setMsgGame(msgGame => `${pokeComputer.name} fainted ! <br> Your ${pokePlayer.name} wins !`)\r\n        setComputerState(setComputerState => 'loose')\r\n        setTimeout(() => {\r\n          setGameOver(gameOver => true)\r\n        }, 2000)\r\n      } else if (nowHpComputer === 0 && computerSelectedPoke.length > 0) {\r\n        setComputerState(setComputerState => 'loose')\r\n        // Launch next pokemon\r\n        nextPokeComputer()\r\n      } else {\r\n        setMsgGame(msgGame => '')\r\n\r\n        // Computer turn to fight\r\n        handleComputerAttack()\r\n      }\r\n    }, 2000)\r\n  }\r\n\r\n  const pickComputerAttack = () => {\r\n    // pick random attack type\r\n    const attackType = Math.floor(Math.random() * 2)\r\n    // pick random attack from type\r\n    if (attackType === 0) {\r\n      const attackIndex = Math.floor(Math.random() * pokeComputer.attacks.fast.length)\r\n      setComputerAttack(computerAttack => pokeComputer.attacks.fast[attackIndex])\r\n    } else {\r\n      const attackIndex = Math.floor(Math.random() * pokeComputer.attacks.special.length)\r\n      setComputerAttack(computerAttack => pokeComputer.attacks.special[attackIndex])\r\n    }\r\n  }\r\n\r\n  const handleComputerAttack = () => {\r\n    const pokeDefWeakness = pokePlayer.weaknesses\r\n    const pokeDefResistant = pokePlayer.resistant\r\n    const pokeAttTypes = pokeComputer.types\r\n\r\n    // HANDLE ANIMATE\r\n    setComputerState(computerState => 'attack')\r\n    setTimeout(() => {\r\n      setPlayerState(playerState => 'damage')\r\n    }, 500)\r\n    // END ANIMATE\r\n\r\n    pickComputerAttack()\r\n    // TODO Random esquive\r\n    // TODO Extract damage calcul\r\n\r\n    // set initial damage\r\n    let { name, damage } = computerAttack\r\n    damage = (damage * 2) + Math.floor(Math.random() * 50)\r\n    // search for weakness\r\n    if (pokeDefWeakness.some(Weakness => pokeAttTypes.includes(Weakness))) { damage *= 2 }\r\n    // search for resistance\r\n    if (pokeDefResistant.some(Resistant => pokeAttTypes.includes(Resistant))) { damage /= 2 }\r\n    // set new damage\r\n    damage = Math.floor(damage)\r\n\r\n    // Set new hp level for player\r\n    nowHpPlayer = ((pokePlayerHpNow - damage) < 0 ? 0 : (pokePlayerHpNow - damage))\r\n    setPokePlayerHpNow(pokePlayerHpNow => nowHpPlayer)\r\n\r\n    setMsgGame(msgGame => `${pokeComputer.name} used ${name} <br> and make ${damage} damage !`)\r\n\r\n    setTimeout(() => {\r\n      if (nowHpPlayer === 0 && multiSelectedPoke.length === 0) {\r\n        // Current poke loose and no more stand by\r\n        setMsgGame(msgGame => `Your ${pokePlayer.name} fainted ! <br> You loose !`)\r\n        setPlayerState(playerState => 'loose')\r\n        setTimeout(() => {\r\n          setGameOver(gameOver => true)\r\n        }, 2000)\r\n      } if (nowHpPlayer === 0 && multiSelectedPoke.length > 0) {\r\n        // Current poke loose but more stand by\r\n        setPlayerState(setPlayerState => 'loose')\r\n        // Launch next pokemon\r\n        nextPokePlayer()\r\n      } else {\r\n        setMsgGame(msgGame => '')\r\n      }\r\n    }, 2000)\r\n  }\r\n\r\n  const nextPokeComputer = () => {\r\n    setMsgGame(msgGame => `${pokeComputer.name} fainted !`)\r\n    setTimeout(() => {\r\n      setComputerState(setComputerState => 'start')\r\n      const pickPokeComputer = computerSelectedPoke.shift()\r\n      setPrevComputerTeam([...prevComputerTeam, pickPokeComputer])\r\n      setPokeComputer(pokeComputer => pickPokeComputer)\r\n      setMsgGame(msgGame => `Computer call ${pickPokeComputer.name} !`)\r\n      setTimeout(() => {\r\n        setMsgGame(msgGame => '')\r\n      }, 2000)\r\n    }, 2000)\r\n  }\r\n\r\n  const nextPokePlayer = () => {\r\n    setMsgGame(msgGame => `Your ${pokePlayer.name} fainted !`)\r\n    setTimeout(() => {\r\n      setPlayerState(setPlayerState => 'start')\r\n      const pickPokePlayer = multiSelectedPoke.shift()\r\n      setPrevPlayerTeam([...prevPlayerTeam, pickPokePlayer])\r\n      setPokePlayer(pokePlayer => pickPokePlayer)\r\n      setMsgGame(msgGame => `Go ${pickPokePlayer.name} !`)\r\n      setTimeout(() => {\r\n        setMsgGame(msgGame => '')\r\n      }, 2000)\r\n    }, 2000)\r\n  }\r\n\r\n  const handleReStart = () => {\r\n    setMultiSelectedPoke([...prevPlayerTeam, ...multiSelectedPoke])\r\n    setComputerSelectedPoke([...prevComputerTeam, ...computerSelectedPoke])\r\n    setPokeComputerHpNow(pokeComputerHpNow => pokeComputer.maxHP)\r\n    setPokePlayerHpNow(pokePlayerHpNow => pokePlayer.maxHP)\r\n    setComputerState(computerSate => 'start')\r\n    setPlayerState(playerState => 'start')\r\n    setGameOver(gameOver => false)\r\n    setMsgGame(msgGame => '')\r\n    setIsStart(true)\r\n  }\r\n\r\n  return (\r\n\r\n    <div className='container vh100'>\r\n      <div className='row row vh100 justify-content-center align-items-center'>\r\n        <div className='col-sm-12'>\r\n          {/* BATTLE SCREEN CONTAINER */}\r\n          <div className='card px-2 mx-auto battleField'>\r\n\r\n            <ComputerBox\r\n              pokeComputer={pokeComputer}\r\n              computerSelectedPoke={computerSelectedPoke}\r\n              pokeComputerHpNow={pokeComputerHpNow}\r\n              computerState={computerState}\r\n            />\r\n\r\n            <PlayerBox\r\n              pokePlayer={pokePlayer}\r\n              multiSelectedPoke={multiSelectedPoke}\r\n              pokePlayerHpNow={pokePlayerHpNow}\r\n              playerState={playerState}\r\n            />\r\n\r\n            {/* TEXT BOX BOTTOM */}\r\n            <div className='card box-bottom'>\r\n\r\n              <div className='card-body d-flex justify-content-between m-0 p-1'>\r\n\r\n                {gameOver === false && msgGame !== '' && (\r\n                  <MsgGame\r\n                    msgGame={msgGame}\r\n                  />\r\n                )}\r\n\r\n                {msgGame === '' && gameOver === false && typeof pokeComputer.name !== 'undefined' && (\r\n                  <>\r\n\r\n                    <ListGroup className='lstAttacks'>\r\n                      {pokePlayer.attacks && pokePlayer.attacks.fast\r\n                        .slice(0, 2)\r\n                        .map((attack, index) => (\r\n                          <ListGroup.Item key={attack.name} role='button' className='item-attack-fast' action>\r\n                            <PlayerAttacks\r\n                              name={attack.name}\r\n                              damage={attack.damage}\r\n                              type={attack.type}\r\n                              handlePlayerAttack={handlePlayerAttack}\r\n                            />\r\n                          </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n\r\n                    <ListGroup className='lstAttacks'>\r\n                      {pokePlayer.attacks && pokePlayer.attacks.special\r\n                        .slice(0, 2)\r\n                        .map((attack, index) => (\r\n                          <ListGroup.Item key={attack.name} role='button' className='item-attack-spe' action>\r\n                            <PlayerAttacks\r\n                              name={attack.name}\r\n                              damage={attack.damage}\r\n                              type={attack.type}\r\n                              handlePlayerAttack={handlePlayerAttack}\r\n                            />\r\n                          </ListGroup.Item>\r\n                        ))}\r\n                    </ListGroup>\r\n\r\n                  </>\r\n                )}\r\n\r\n                {gameOver === true && (\r\n                  <ReStart handleReStart={handleReStart} />\r\n                )}\r\n\r\n              </div>\r\n            </div>\r\n            {/* END TEXT BOX BOTTOM */}\r\n          </div>\r\n          {/* END BATTLE SCREEN CONTAINER */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Battle\r\n","D:\\projets\\react\\poketest-lunajets\\src\\context\\context.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\hooks\\usePokemons.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\context\\index.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerAttacks.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\ComputerBox.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerBox.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerStandByPoke.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\ComputerStandByPoke.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\ReStart.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\MsgGame.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\PlayerImgPoke.js",[],"D:\\projets\\react\\poketest-lunajets\\src\\components\\ComputerImgPoke.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":35,"column":5,"nodeType":"103","messageId":"104","endLine":35,"endColumn":20},{"ruleId":"101","severity":1,"message":"105","line":37,"column":5,"nodeType":"103","messageId":"104","endLine":37,"endColumn":25},{"ruleId":"106","severity":1,"message":"107","line":25,"column":6,"nodeType":"108","endLine":25,"endColumn":8,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":49,"column":6,"nodeType":"108","endLine":49,"endColumn":8,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"112","line":60,"column":6,"nodeType":"108","endLine":60,"endColumn":8,"suggestions":"113"},{"ruleId":"106","severity":1,"message":"114","line":89,"column":6,"nodeType":"108","endLine":89,"endColumn":20,"suggestions":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'setSelectedPoke' is assigned a value but never used.","Identifier","unusedVar","'setMultiSelectedPoke' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array. If 'setDataPoke' needs the current value of 'data', you can also switch to useReducer instead of useState and read 'data' in the reducer.","ArrayExpression",["118"],"React Hook useEffect has missing dependencies: 'multiSelectedPoke' and 'pokePlayer'. Either include them or remove the dependency array. You can also do a functional update 'setPokePlayer(p => ...)' if you only need 'pokePlayer' in the 'setPokePlayer' call.",["119"],"React Hook useEffect has a missing dependency: 'computerSelectedPoke'. Either include it or remove the dependency array.",["120"],"React Hook useEffect has missing dependencies: 'isStart', 'pickComputerAttack', and 'start'. Either include them or remove the dependency array.",["121"],"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [data]",{"range":"130","text":"131"},"Update the dependencies array to be: [multiSelectedPoke, pokePlayer]",{"range":"132","text":"133"},"Update the dependencies array to be: [computerSelectedPoke]",{"range":"134","text":"135"},"Update the dependencies array to be: [isStart, pickComputerAttack, pokeComputer, start]",{"range":"136","text":"137"},[820,822],"[data]",[1541,1543],"[multiSelectedPoke, pokePlayer]",[1898,1900],"[computerSelectedPoke]",[2606,2620],"[isStart, pickComputerAttack, pokeComputer, start]"]